{"ast":null,"code":"var _jsxFileName = \"/Users/erzankabaev/Developer/maxComfort/client/src/pages/Room.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { Button, Alert } from \"react-bootstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RoomPage = () => {\n  _s();\n  const {\n    buildingId\n  } = useParams(); // Get buildingId from the URL\n  const [building, setBuilding] = useState(null);\n  const [temperature, setTemperature] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    console.log(\"Building ID from URL:\", buildingId); // Debug: Check the buildingId\n\n    if (buildingId) {\n      // Fetch the building details using buildingId\n      axios.get(`http://localhost:5002/buildings/${buildingId}`).then(response => {\n        console.log(\"Building data fetched:\", response.data); // Debug: Log the building data\n        setBuilding(response.data); // Set the building data\n      }).catch(error => {\n        console.error(\"Error fetching building data:\", error); // Debug: Log the error\n        setError(\"Error fetching building data\");\n      });\n\n      // Fetch the current temperature\n      axios.get('http://localhost:5002/getTemp').then(response => {\n        console.log(\"Temperature fetched:\", response.data.temp); // Debug: Log the temperature\n        setTemperature(response.data.temp); // Set the temperature\n      }).catch(error => {\n        console.error(\"Error fetching temperature:\", error); // Debug: Log the error\n        setError(\"Error fetching temperature\");\n      }).finally(() => {\n        setLoading(false); // Stop loading after both requests complete\n      });\n    }\n  }, [buildingId]);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '20px',\n      maxWidth: '800px',\n      margin: 'auto'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Room Page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), building ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Building Name: \", building.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Description: \", building.description]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this), temperature !== null ? /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Current Temperature: \", temperature, \"\\xB0C\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading temperature...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 13\n      }, this), temperature > building.temperatureLimit && /*#__PURE__*/_jsxDEV(Alert, {\n        variant: \"danger\",\n        children: [\"Warning: The temperature exceeds the safe limit of \", building.temperatureLimit, \"\\xB0C!\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => {\n          axios.get('http://localhost:5002/getTemp').then(response => {\n            setTemperature(response.data.temp);\n          }).catch(error => {\n            console.error('Error refreshing temperature:', error);\n          });\n        },\n        children: \"Refresh Temperature\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Building not found.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n_s(RoomPage, \"LHSw2mpZbbSol0ZI42r0PeHe4wM=\", false, function () {\n  return [useParams];\n});\n_c = RoomPage;\nexport default RoomPage;\nvar _c;\n$RefreshReg$(_c, \"RoomPage\");","map":{"version":3,"names":["React","useState","useEffect","useParams","axios","Button","Alert","jsxDEV","_jsxDEV","RoomPage","_s","buildingId","building","setBuilding","temperature","setTemperature","loading","setLoading","error","setError","console","log","get","then","response","data","catch","temp","finally","children","fileName","_jsxFileName","lineNumber","columnNumber","style","padding","maxWidth","margin","name","description","temperatureLimit","variant","onClick","_c","$RefreshReg$"],"sources":["/Users/erzankabaev/Developer/maxComfort/client/src/pages/Room.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { Button, Alert } from \"react-bootstrap\";\n\nconst RoomPage = () => {\n  const { buildingId } = useParams(); // Get buildingId from the URL\n  const [building, setBuilding] = useState(null);\n  const [temperature, setTemperature] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    console.log(\"Building ID from URL:\", buildingId); // Debug: Check the buildingId\n\n    if (buildingId) {\n      // Fetch the building details using buildingId\n      axios.get(`http://localhost:5002/buildings/${buildingId}`)\n        .then(response => {\n          console.log(\"Building data fetched:\", response.data); // Debug: Log the building data\n          setBuilding(response.data); // Set the building data\n        })\n        .catch(error => {\n          console.error(\"Error fetching building data:\", error); // Debug: Log the error\n          setError(\"Error fetching building data\");\n        });\n\n      // Fetch the current temperature\n      axios.get('http://localhost:5002/getTemp')\n        .then(response => {\n          console.log(\"Temperature fetched:\", response.data.temp); // Debug: Log the temperature\n          setTemperature(response.data.temp); // Set the temperature\n        })\n        .catch(error => {\n          console.error(\"Error fetching temperature:\", error); // Debug: Log the error\n          setError(\"Error fetching temperature\");\n        })\n        .finally(() => {\n          setLoading(false); // Stop loading after both requests complete\n        });\n    }\n  }, [buildingId]);\n\n  if (loading) {\n    return <p>Loading...</p>;\n  }\n\n  if (error) {\n    return <p>{error}</p>;\n  }\n\n  return (\n    <div style={{ padding: '20px', maxWidth: '800px', margin: 'auto' }}>\n      <h2>Room Page</h2>\n\n      {building ? (\n        <div>\n          <h3>Building Name: {building.name}</h3>\n          <p>Description: {building.description}</p>\n\n          {temperature !== null ? (\n            <h3>Current Temperature: {temperature}°C</h3>\n          ) : (\n            <p>Loading temperature...</p>\n          )}\n          \n          {temperature > building.temperatureLimit && (\n            <Alert variant=\"danger\">\n              Warning: The temperature exceeds the safe limit of {building.temperatureLimit}°C!\n            </Alert>\n          )}\n\n          <Button\n            onClick={() => {\n              axios.get('http://localhost:5002/getTemp')\n                .then(response => {\n                  setTemperature(response.data.temp);\n                })\n                .catch(error => {\n                  console.error('Error refreshing temperature:', error);\n                });\n            }}\n          >\n            Refresh Temperature\n          </Button>\n        </div>\n      ) : (\n        <p>Building not found.</p>\n      )}\n    </div>\n  );\n};\n\nexport default RoomPage;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}